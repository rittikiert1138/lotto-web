generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id   Int      @id @default(autoincrement())
  phone     String   @unique
  username  String   @unique
  password  String
  role      String
  status    Int
  createdBy Int
  updatedBy Int
  member    Member[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  member_id   Int            @id @default(autoincrement())
  username    String         @unique @db.VarChar(50)
  password    String
  status      Int
  attemp      Int            @default(0)
  phone       String         @unique @db.VarChar(10)
  balance     Float          @default(0)
  total_bet   Float          @default(0)
  user        User?          @relation(fields: [user_id], references: [user_id])
  user_id     Int?
  transaction Transaction[]
  bank        MemberBank[]
  lotto       member_lotto[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Transaction {
  transaction_id     Int      @id @default(autoincrement())
  transaction_type   Int
  transaction_status Int
  transaction_slip   String?
  balance            Float    @default(0)
  member             Member   @relation(fields: [member_id], references: [member_id])
  member_id          Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model MemberBank {
  member_bank_id    Int      @id @default(autoincrement())
  bank_type         Int
  bank_name         String
  bank_number       String
  bank_account_name String
  member            Member   @relation(fields: [member_id], references: [member_id])
  member_id         Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Bank {
  bank_id           Int      @id @default(autoincrement())
  bank_type         Int
  bank_name         String
  bank_number       String
  bank_account_name String
  bank_status       Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model otp_system {
  otp_id  Int      @id @default(autoincrement())
  otp     String
  ref     String
  phone   String   @db.VarChar(10)
  expired DateTime
}

model lotto_type {
  lotto_type_id     Int      @id @default(autoincrement())
  lotto_type_name   String   @unique
  lotto_type_status Int
  lotto_type_icon   String?
  lotto_type_color  String?
  order_seq         Int?
  lotto_type_width  String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lotto             lotto[]
}

model lotto {
  lotto_id      Int            @id @default(autoincrement())
  lotto_type_id Int
  lotto_type    lotto_type     @relation(fields: [lotto_type_id], references: [lotto_type_id])
  period        String
  open_time     String
  close_time    String
  status        Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  member_lotto  member_lotto[]
}

model member_lotto {
  member_lotto_id   Int                 @id @default(autoincrement())
  lotto_id          Int
  lotto             lotto               @relation(fields: [lotto_id], references: [lotto_id])
  member_id         Int
  member            Member              @relation(fields: [member_id], references: [member_id])
  member_lotto_list member_lotto_list[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model member_lotto_list {
  member_lotto_list_id Int          @id @default(autoincrement())
  lotto_id             Int
  member_id            Int
  bet_type             Int
  bet_number           String
  bet_amount           Float
  bet_status           Int //1=กำลังรอ 2 = ถูกหวย 3 = ไม่ถูก
  member_lotto_id      Int
  member_lotto         member_lotto @relation(fields: [member_lotto_id], references: [member_lotto_id])
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}
